/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category CreateComptoir
 * @category generated
 */
export type CreateComptoirInstructionArgs = {
  mint: web3.PublicKey
  fees: number
  feesDestination: web3.PublicKey
  authority: web3.PublicKey
}
/**
 * @category Instructions
 * @category CreateComptoir
 * @category generated
 */
export const createComptoirStruct = new beet.BeetArgsStruct<
  CreateComptoirInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mint', beetSolana.publicKey],
    ['fees', beet.u16],
    ['feesDestination', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
  ],
  'CreateComptoirInstructionArgs'
)
/**
 * Accounts required by the _createComptoir_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] comptoir
 * @property [] mint
 * @property [_writable_] escrow
 * @category Instructions
 * @category CreateComptoir
 * @category generated
 */
export type CreateComptoirInstructionAccounts = {
  payer: web3.PublicKey
  comptoir: web3.PublicKey
  mint: web3.PublicKey
  escrow: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createComptoirInstructionDiscriminator = [
  108, 4, 214, 51, 56, 168, 122, 154,
]

/**
 * Creates a _CreateComptoir_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateComptoir
 * @category generated
 */
export function createCreateComptoirInstruction(
  accounts: CreateComptoirInstructionAccounts,
  args: CreateComptoirInstructionArgs,
  programId = new web3.PublicKey('EZxFrEd1TBL6A1zzSvcasnR7RyEwRqkLmBjvLsSCaKNc')
) {
  const [data] = createComptoirStruct.serialize({
    instructionDiscriminator: createComptoirInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.comptoir,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
