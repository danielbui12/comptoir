/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemoveBuyOffer
 * @category generated
 */
export const removeBuyOfferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RemoveBuyOfferInstructionArgs'
)
/**
 * Accounts required by the _removeBuyOffer_ instruction
 *
 * @property [_writable_, **signer**] buyer
 * @property [_writable_] buyerPayingAccount
 * @property [] comptoir
 * @property [_writable_] escrow
 * @property [_writable_] buyOffer
 * @category Instructions
 * @category RemoveBuyOffer
 * @category generated
 */
export type RemoveBuyOfferInstructionAccounts = {
  buyer: web3.PublicKey
  buyerPayingAccount: web3.PublicKey
  comptoir: web3.PublicKey
  escrow: web3.PublicKey
  buyOffer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const removeBuyOfferInstructionDiscriminator = [
  174, 218, 46, 172, 180, 214, 39, 236,
]

/**
 * Creates a _RemoveBuyOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RemoveBuyOffer
 * @category generated
 */
export function createRemoveBuyOfferInstruction(
  accounts: RemoveBuyOfferInstructionAccounts,
  programId = new web3.PublicKey('EZxFrEd1TBL6A1zzSvcasnR7RyEwRqkLmBjvLsSCaKNc')
) {
  const [data] = removeBuyOfferStruct.serialize({
    instructionDiscriminator: removeBuyOfferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.buyer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.buyerPayingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.comptoir,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyOffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
