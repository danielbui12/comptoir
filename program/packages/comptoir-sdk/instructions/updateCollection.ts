/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category UpdateCollection
 * @category generated
 */
export type UpdateCollectionInstructionArgs = {
  optionalFee: beet.COption<number>
  optionalSymbol: beet.COption<string>
  optionalRequiredVerifier: beet.COption<web3.PublicKey>
  optionalIgnoreCreatorFee: beet.COption<boolean>
}
/**
 * @category Instructions
 * @category UpdateCollection
 * @category generated
 */
export const updateCollectionStruct = new beet.FixableBeetArgsStruct<
  UpdateCollectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['optionalFee', beet.coption(beet.u16)],
    ['optionalSymbol', beet.coption(beet.utf8String)],
    ['optionalRequiredVerifier', beet.coption(beetSolana.publicKey)],
    ['optionalIgnoreCreatorFee', beet.coption(beet.bool)],
  ],
  'UpdateCollectionInstructionArgs'
)
/**
 * Accounts required by the _updateCollection_ instruction
 *
 * @property [**signer**] authority
 * @property [] comptoir
 * @property [_writable_] collection
 * @category Instructions
 * @category UpdateCollection
 * @category generated
 */
export type UpdateCollectionInstructionAccounts = {
  authority: web3.PublicKey
  comptoir: web3.PublicKey
  collection: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateCollectionInstructionDiscriminator = [
  97, 70, 36, 49, 138, 12, 199, 239,
]

/**
 * Creates a _UpdateCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateCollection
 * @category generated
 */
export function createUpdateCollectionInstruction(
  accounts: UpdateCollectionInstructionAccounts,
  args: UpdateCollectionInstructionArgs,
  programId = new web3.PublicKey('EZxFrEd1TBL6A1zzSvcasnR7RyEwRqkLmBjvLsSCaKNc')
) {
  const [data] = updateCollectionStruct.serialize({
    instructionDiscriminator: updateCollectionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.comptoir,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
