/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * ErrFeeShouldLowerOrEqualThan10000: 'Fee should be <= 10000'
 *
 * @category Errors
 * @category generated
 */
export class ErrFeeShouldLowerOrEqualThan10000Error extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'ErrFeeShouldLowerOrEqualThan10000'
  constructor() {
    super('Fee should be <= 10000')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrFeeShouldLowerOrEqualThan10000Error)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1770,
  () => new ErrFeeShouldLowerOrEqualThan10000Error()
)
createErrorFromNameLookup.set(
  'ErrFeeShouldLowerOrEqualThan10000',
  () => new ErrFeeShouldLowerOrEqualThan10000Error()
)

/**
 * ErrTryingToUnlistMoreThanOwned: 'Trying to unlist more than owned'
 *
 * @category Errors
 * @category generated
 */
export class ErrTryingToUnlistMoreThanOwnedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ErrTryingToUnlistMoreThanOwned'
  constructor() {
    super('Trying to unlist more than owned')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrTryingToUnlistMoreThanOwnedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new ErrTryingToUnlistMoreThanOwnedError()
)
createErrorFromNameLookup.set(
  'ErrTryingToUnlistMoreThanOwned',
  () => new ErrTryingToUnlistMoreThanOwnedError()
)

/**
 * ErrCouldNotBuyEnoughItem: 'Could not buy the required quantity of items'
 *
 * @category Errors
 * @category generated
 */
export class ErrCouldNotBuyEnoughItemError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'ErrCouldNotBuyEnoughItem'
  constructor() {
    super('Could not buy the required quantity of items')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrCouldNotBuyEnoughItemError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new ErrCouldNotBuyEnoughItemError())
createErrorFromNameLookup.set(
  'ErrCouldNotBuyEnoughItem',
  () => new ErrCouldNotBuyEnoughItemError()
)

/**
 * ErrMetaDataMintDoesNotMatchItemMint: 'metadata mint does not match item mint'
 *
 * @category Errors
 * @category generated
 */
export class ErrMetaDataMintDoesNotMatchItemMintError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'ErrMetaDataMintDoesNotMatchItemMint'
  constructor() {
    super('metadata mint does not match item mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrMetaDataMintDoesNotMatchItemMintError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new ErrMetaDataMintDoesNotMatchItemMintError()
)
createErrorFromNameLookup.set(
  'ErrMetaDataMintDoesNotMatchItemMint',
  () => new ErrMetaDataMintDoesNotMatchItemMintError()
)

/**
 * ErrNftNotPartOfCollection: 'nft not part of collection'
 *
 * @category Errors
 * @category generated
 */
export class ErrNftNotPartOfCollectionError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'ErrNftNotPartOfCollection'
  constructor() {
    super('nft not part of collection')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrNftNotPartOfCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new ErrNftNotPartOfCollectionError()
)
createErrorFromNameLookup.set(
  'ErrNftNotPartOfCollection',
  () => new ErrNftNotPartOfCollectionError()
)

/**
 * DerivedKeyInvalid: 'Derived key invalid'
 *
 * @category Errors
 * @category generated
 */
export class DerivedKeyInvalidError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'DerivedKeyInvalid'
  constructor() {
    super('Derived key invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DerivedKeyInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new DerivedKeyInvalidError())
createErrorFromNameLookup.set(
  'DerivedKeyInvalid',
  () => new DerivedKeyInvalidError()
)

/**
 * NotInitialized: 'AccountNotInitialized'
 *
 * @category Errors
 * @category generated
 */
export class NotInitializedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'NotInitialized'
  constructor() {
    super('AccountNotInitialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new NotInitializedError())
createErrorFromNameLookup.set('NotInitialized', () => new NotInitializedError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
