/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category CreateSellOrder
 * @category generated
 */
export type CreateSellOrderInstructionArgs = {
  price: beet.bignum
  quantity: beet.bignum
  destination: web3.PublicKey
}
/**
 * @category Instructions
 * @category CreateSellOrder
 * @category generated
 */
export const createSellOrderStruct = new beet.BeetArgsStruct<
  CreateSellOrderInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['price', beet.u64],
    ['quantity', beet.u64],
    ['destination', beetSolana.publicKey],
  ],
  'CreateSellOrderInstructionArgs'
)
/**
 * Accounts required by the _createSellOrder_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] sellerNftTokenAccount
 * @property [] comptoir
 * @property [] collection
 * @property [] mint
 * @property [] metadata
 * @property [_writable_] vault
 * @property [_writable_] sellOrder
 * @category Instructions
 * @category CreateSellOrder
 * @category generated
 */
export type CreateSellOrderInstructionAccounts = {
  payer: web3.PublicKey
  sellerNftTokenAccount: web3.PublicKey
  comptoir: web3.PublicKey
  collection: web3.PublicKey
  mint: web3.PublicKey
  metadata: web3.PublicKey
  vault: web3.PublicKey
  sellOrder: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createSellOrderInstructionDiscriminator = [
  53, 52, 255, 44, 191, 74, 171, 225,
]

/**
 * Creates a _CreateSellOrder_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateSellOrder
 * @category generated
 */
export function createCreateSellOrderInstruction(
  accounts: CreateSellOrderInstructionAccounts,
  args: CreateSellOrderInstructionArgs,
  programId = new web3.PublicKey('FY4tLSXn95o5YuecY3sAfPCoPk9ZSs2cvFa9HiHYPFgy')
) {
  const [data] = createSellOrderStruct.serialize({
    instructionDiscriminator: createSellOrderInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.sellerNftTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.comptoir,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellOrder,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
